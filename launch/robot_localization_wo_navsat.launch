<launch>
    <arg name="device_type_camera"    		default="d4.5"/>	<!-- Note: using regular expression. match D435, D435i, D415... -->
    <arg name="serial_no_camera"    			default=""/>
    <arg name="camera"              			default="camera"/>		<!-- Note: Replace with camera name -->
    <arg name="use_rviz"                  default="false"/>
    <arg name="use_rtabmapviz"            default="false"/>
    <arg name="clip_distance"             default="-2"/>


<!-- elementary operations -->
  <include file="$(find rosmower)/launch/teleop.launch"> 
  </include> 

<!-- GPS -->
<include file="$(find open_mower)/launch/include/_comms.launch" /> 

<!--
         <include file="$(find rosmower)/launch/rs_d400.launch">
            <arg name="device_type_camera"             value="$(arg device_type_camera)"/>
            <arg name="serial_no_camera"               value="$(arg serial_no_camera)"/>
            <arg name="camera"                         value="$(arg camera)"/>
            <arg name="clip_distance"                   value="$(arg clip_distance)"/>
            
    </include>  
-->
  <!-- IMU Data Publisher Using the BNO085 IMU Sensor -->
  <!-- Publish: /imu/data -->
    <node name="ros_bno08x" pkg="ros_bno08x" type="talker.py" respawn="true" respawn_delay="2">
       <param name="frame_id" value="imu" />
       <param name="cov_linear" value="0.60" />        <!-- linear covariance +-80mg taken from https://github.com/Vijfendertig/rosserial_adafruit_bno055 -->
       <param name="cov_angular" value="0.003" />      <!-- angular covariance +- 3deg/s -->
       <param name="cov_orientation" value="0.002" />  <!-- magnetic covariance +-2.5deg -->
       <param name="cov_magnetic" value="0.002" />     <!-- magnetic covariance +-2.5deg -->
         </node> 

<!--
     This launch file provides an example of how to work with GPS data using robot_localization. It runs two nodes:
       (1) An EKF instance that fuses odometry and IMU data and outputs an odom-frame state estimate
       (2) A second EKF instance that fuses the same data, but also fuses the transformed GPS data

       The first EKF instance produces the odom->base_link transform. The second EKF produces the map->odom transform,
       but requires the odom->base_link transform from the first instance in order to do so.
       
       RTK GPS Dta are provided by ublox_2_odometry package
-->

 <node pkg="ublox_2_odometry" type="ublox_2_odometry" name="ublox_2_odometry" output="screen"/>

  <rosparam command="load" file="$(find rosmower)/conf/robot_localization_wo_navsat.yaml" />
    <remap from="raw_odom" to="/hoverboard_velocity_controller/odom"/>
    <remap from="imu/data" to="bno08x/raw" /> 

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_odom" clear_params="true"/>

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
    <remap from="odometry/filtered" to="odometry/filtered_map"/>
  </node>

</launch>
